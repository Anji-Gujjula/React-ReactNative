
npm install -g @react-native-community/cli
npx @react-native-community/cli init FileReceiverApp



cd FileReceiverApp
npm install react-native-websocket
npm install react-native-fs


OPEN   --->  android/app/src/main/AndroidManifest.xml

<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>

web app.js

import React, { useState } from 'react';

const App = () => {
  const [file, setFile] = useState(null);

  const handleFileChange = (event) => {
    setFile(event.target.files[0]);
  };

  const handleUpload = () => {
    if (!file) return;

    const ws = new WebSocket('ws://localhost:8085');

    ws.onopen = () => {
      const reader = new FileReader();
      reader.onload = () => {
        const arrayBuffer = reader.result;
        const filename = file.name;

        // Send the filename and file data as JSON, with the data as ArrayBuffer
        ws.send(JSON.stringify({ filename }));
        ws.send(arrayBuffer);
      };
      reader.readAsArrayBuffer(file); // Read the file as an ArrayBuffer
    };

    ws.onmessage = (event) => {
      console.log('Server response:', event.data);
      alert(event.data);
    };

    ws.onerror = (error) => {
      console.error('WebSocket error:', error);
    };
  };

  return (
    <div>
      <input type="file" onChange={handleFileChange} />
      <button onClick={handleUpload}>Upload File</button>
    </div>
  );
};

export default App;


React native App.js


import React, { useEffect } from 'react';
import { SafeAreaView, Button, Alert } from 'react-native';
import RNFS from 'react-native-fs';

const App = () => {
  useEffect(() => {
    const ws = new WebSocket('ws://<your-local-ip>:8085'); // Ensure you use the correct local IP and port

    ws.onopen = () => {
      console.log('Connected to WebSocket server');
    };

    let receivedFilename = null;

    ws.onmessage = async (event) => {
      if (typeof event.data === 'string') {
        // Assume the first message is the filename
        receivedFilename = JSON.parse(event.data).filename;
      } else if (event.data instanceof ArrayBuffer) {
        if (receivedFilename) {
          const filePath = `${RNFS.DocumentDirectoryPath}/${receivedFilename}`;
          const buffer = Buffer.from(event.data);

          // Save the file
          await RNFS.writeFile(filePath, buffer.toString('base64'), 'base64');
          Alert.alert('File saved successfully', `File saved at ${filePath}`);
        } else {
          console.error('Filename not received before file data');
        }
      }
    };

    ws.onerror = (error) => {
      console.error('WebSocket error:', error);
    };

    return () => {
      ws.close();
    };
  }, []);

  const handleTestFileUpload = () => {
    Alert.alert('Test', 'File upload works only through web app, make sure your web app is correctly sending the file.');
  };

  return (
    <SafeAreaView>
      <Button title="Test File Upload" onPress={handleTestFileUpload} />
    </SafeAreaView>
  );
};

export default App;


server.js file 


const WebSocket = require('ws');
const fs = require('fs');
const path = require('path');
const http = require('http');

// Define the directory where files will be saved
const uploadDir = path.join(__dirname, 'uploadedFile');

// Create the directory if it doesn't exist
if (!fs.existsSync(uploadDir)) {
  fs.mkdirSync(uploadDir);
}

const server = http.createServer();
const wss = new WebSocket.Server({ server });

wss.on('connection', (ws) => {
  let fileInfo = null;

  ws.on('message', (message) => {
    // If the message is a string, it's expected to be the file info (filename)
    if (typeof message === 'string') {
      try {
        fileInfo = JSON.parse(message);
      } catch (error) {
        console.error('Error parsing JSON:', error);
        ws.send('Error parsing JSON');
      }
    } else if (message instanceof ArrayBuffer || Buffer.isBuffer(message)) {
      // If the message is binary data, it's expected to be the file content
      if (fileInfo && fileInfo.filename) {
        const filePath = path.join(uploadDir, fileInfo.filename);
        const buffer = Buffer.from(message);

        fs.writeFile(filePath, buffer, (err) => {
          if (err) {
            console.error('Error saving file:', err);
            ws.send('Error saving file');
          } else {
            console.log('File saved successfully:', filePath);
            ws.send('File saved successfully');
          }
        });
      } else {
        console.error('File info not received before binary data');
        ws.send('File info not received before binary data');
      }
    } else {
      console.error('Unexpected message format');
      ws.send('Unexpected message format');
    }
  });
});

server.listen(8085, () => {
  console.log('WebSocket server listening on port 8085');
});

